# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class Item(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, description=None, abbreviation=None, color=None, ordinal=None, type=None, visibility=None, availability=None, category_id=None, modifier_list_ids=None, fee_ids=None):
        """
        Item - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'description': 'str',
            'abbreviation': 'str',
            'color': 'str',
            'ordinal': 'int',
            'type': 'str',
            'visibility': 'str',
            'availability': 'list[str]',
            'category_id': 'str',
            'modifier_list_ids': 'list[str]',
            'fee_ids': 'list[str]'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'abbreviation': 'abbreviation',
            'color': 'color',
            'ordinal': 'ordinal',
            'type': 'type',
            'visibility': 'visibility',
            'availability': 'availability',
            'category_id': 'category_id',
            'modifier_list_ids': 'modifier_list_ids',
            'fee_ids': 'fee_ids'
        }

        self._id = id
        self._name = name
        self._description = description
        self._abbreviation = abbreviation
        self._color = color
        self._ordinal = ordinal
        self._type = type
        self._visibility = visibility
        self._availability = availability
        self._category_id = category_id
        self._modifier_list_ids = modifier_list_ids
        self._fee_ids = fee_ids

    @property
    def id(self):
        """
        Gets the id of this Item.
        The item's unique ID.

        :return: The id of this Item.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Item.
        The item's unique ID.

        :param id: The id of this Item.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Item.
        The item's name.

        :return: The name of this Item.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Item.
        The item's name.

        :param name: The name of this Item.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Item.
        The item's description, if any.

        :return: The description of this Item.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Item.
        The item's description, if any.

        :param description: The description of this Item.
        :type: str
        """

        self._description = description

    @property
    def abbreviation(self):
        """
        Gets the abbreviation of this Item.
        The text of the item's display label in Square Register. This value is present only if an abbreviation other than the default has been set.

        :return: The abbreviation of this Item.
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """
        Sets the abbreviation of this Item.
        The text of the item's display label in Square Register. This value is present only if an abbreviation other than the default has been set.

        :param abbreviation: The abbreviation of this Item.
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def color(self):
        """
        Gets the color of this Item.
        The color of the item's display label in Square Register, as a six character hexadecimal value. This value is present only if a color other than the default has been set.  The default color is `9da2a6`.

        :return: The color of this Item.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this Item.
        The color of the item's display label in Square Register, as a six character hexadecimal value. This value is present only if a color other than the default has been set.  The default color is `9da2a6`.

        :param color: The color of this Item.
        :type: str
        """

        self._color = color

    @property
    def ordinal(self):
        """
        Gets the ordinal of this Item.
        

        :return: The ordinal of this Item.
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """
        Sets the ordinal of this Item.
        

        :param ordinal: The ordinal of this Item.
        :type: int
        """

        self._ordinal = ordinal

    @property
    def type(self):
        """
        Gets the type of this Item.
        The item's type. This value is `NORMAL` for almost all items.

        :return: The type of this Item.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Item.
        The item's type. This value is `NORMAL` for almost all items.

        :param type: The type of this Item.
        :type: str
        """

        self._type = type

    @property
    def visibility(self):
        """
        Gets the visibility of this Item.
        

        :return: The visibility of this Item.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this Item.
        

        :param visibility: The visibility of this Item.
        :type: str
        """

        self._visibility = visibility

    @property
    def availability(self):
        """
        Gets the availability of this Item.
        Indicates ways that the item can be ordered online, if any.

        :return: The availability of this Item.
        :rtype: list[str]
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """
        Sets the availability of this Item.
        Indicates ways that the item can be ordered online, if any.

        :param availability: The availability of this Item.
        :type: list[str]
        """

        self._availability = availability

    @property
    def category_id(self):
        """
        Gets the category_id of this Item.
        The ID of the category the item belongs to, if any.

        :return: The category_id of this Item.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this Item.
        The ID of the category the item belongs to, if any.

        :param category_id: The category_id of this Item.
        :type: str
        """

        self._category_id = category_id

    @property
    def modifier_list_ids(self):
        """
        Gets the modifier_list_ids of this Item.
        The IDs of modifier lists that apply to the item, if any.

        :return: The modifier_list_ids of this Item.
        :rtype: list[str]
        """
        return self._modifier_list_ids

    @modifier_list_ids.setter
    def modifier_list_ids(self, modifier_list_ids):
        """
        Sets the modifier_list_ids of this Item.
        The IDs of modifier lists that apply to the item, if any.

        :param modifier_list_ids: The modifier_list_ids of this Item.
        :type: list[str]
        """

        self._modifier_list_ids = modifier_list_ids

    @property
    def fee_ids(self):
        """
        Gets the fee_ids of this Item.
        The IDs of fees that apply to the item, if any.

        :return: The fee_ids of this Item.
        :rtype: list[str]
        """
        return self._fee_ids

    @fee_ids.setter
    def fee_ids(self, fee_ids):
        """
        Sets the fee_ids of this Item.
        The IDs of fees that apply to the item, if any.

        :param fee_ids: The fee_ids of this Item.
        :type: list[str]
        """

        self._fee_ids = fee_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
