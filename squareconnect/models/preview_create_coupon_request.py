# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class PreviewCreateCouponRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, idempotency_key=None, coupon_definition_id=None, phone_number=None):
        """
        PreviewCreateCouponRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'idempotency_key': 'str',
            'coupon_definition_id': 'str',
            'phone_number': 'str'
        }

        self.attribute_map = {
            'idempotency_key': 'idempotency_key',
            'coupon_definition_id': 'coupon_definition_id',
            'phone_number': 'phone_number'
        }

        self._idempotency_key = idempotency_key
        self._coupon_definition_id = coupon_definition_id
        self._phone_number = phone_number

    @property
    def idempotency_key(self):
        """
        Gets the idempotency_key of this PreviewCreateCouponRequest.
        Unique identifier. Multiple API calls with the same identifier will result in the same response.  See [Idempotency keys](#idempotencykeys) for more information.

        :return: The idempotency_key of this PreviewCreateCouponRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """
        Sets the idempotency_key of this PreviewCreateCouponRequest.
        Unique identifier. Multiple API calls with the same identifier will result in the same response.  See [Idempotency keys](#idempotencykeys) for more information.

        :param idempotency_key: The idempotency_key of this PreviewCreateCouponRequest.
        :type: str
        """

        if not idempotency_key:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if len(idempotency_key) > 192:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than `192`")
        if len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key

    @property
    def coupon_definition_id(self):
        """
        Gets the coupon_definition_id of this PreviewCreateCouponRequest.
        The kind of coupon to create. Coupon definitions will be created administratively.

        :return: The coupon_definition_id of this PreviewCreateCouponRequest.
        :rtype: str
        """
        return self._coupon_definition_id

    @coupon_definition_id.setter
    def coupon_definition_id(self, coupon_definition_id):
        """
        Sets the coupon_definition_id of this PreviewCreateCouponRequest.
        The kind of coupon to create. Coupon definitions will be created administratively.

        :param coupon_definition_id: The coupon_definition_id of this PreviewCreateCouponRequest.
        :type: str
        """

        if not coupon_definition_id:
            raise ValueError("Invalid value for `coupon_definition_id`, must not be `None`")
        if len(coupon_definition_id) < 1:
            raise ValueError("Invalid value for `coupon_definition_id`, length must be greater than or equal to `1`")

        self._coupon_definition_id = coupon_definition_id

    @property
    def phone_number(self):
        """
        Gets the phone_number of this PreviewCreateCouponRequest.
        The coupon may be retrieved using this phone number.

        :return: The phone_number of this PreviewCreateCouponRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this PreviewCreateCouponRequest.
        The coupon may be retrieved using this phone number.

        :param phone_number: The phone_number of this PreviewCreateCouponRequest.
        :type: str
        """

        if not phone_number:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")
        if len(phone_number) > 20:
            raise ValueError("Invalid value for `phone_number`, length must be less than `20`")
        if len(phone_number) < 1:
            raise ValueError("Invalid value for `phone_number`, length must be greater than or equal to `1`")

        self._phone_number = phone_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
