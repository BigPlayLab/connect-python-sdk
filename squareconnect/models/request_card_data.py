# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class RequestCardData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, number=None, exp_month=None, exp_year=None, cvv=None, billing_postal_code=None):
        """
        RequestCardData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'number': 'str',
            'exp_month': 'int',
            'exp_year': 'int',
            'cvv': 'str',
            'billing_postal_code': 'str'
        }

        self.attribute_map = {
            'number': 'number',
            'exp_month': 'exp_month',
            'exp_year': 'exp_year',
            'cvv': 'cvv',
            'billing_postal_code': 'billing_postal_code'
        }

        self._number = number
        self._exp_month = exp_month
        self._exp_year = exp_year
        self._cvv = cvv
        self._billing_postal_code = billing_postal_code

    @property
    def number(self):
        """
        Gets the number of this RequestCardData.
        The number on the card.

        :return: The number of this RequestCardData.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this RequestCardData.
        The number on the card.

        :param number: The number of this RequestCardData.
        :type: str
        """

        self._number = number

    @property
    def exp_month(self):
        """
        Gets the exp_month of this RequestCardData.
        The month of the card's expiration date, which must be between 1-12.

        :return: The exp_month of this RequestCardData.
        :rtype: int
        """
        return self._exp_month

    @exp_month.setter
    def exp_month(self, exp_month):
        """
        Sets the exp_month of this RequestCardData.
        The month of the card's expiration date, which must be between 1-12.

        :param exp_month: The exp_month of this RequestCardData.
        :type: int
        """

        self._exp_month = exp_month

    @property
    def exp_year(self):
        """
        Gets the exp_year of this RequestCardData.
        The year of the card's expiration date, which must be a 4 digit year.

        :return: The exp_year of this RequestCardData.
        :rtype: int
        """
        return self._exp_year

    @exp_year.setter
    def exp_year(self, exp_year):
        """
        Sets the exp_year of this RequestCardData.
        The year of the card's expiration date, which must be a 4 digit year.

        :param exp_year: The exp_year of this RequestCardData.
        :type: int
        """

        self._exp_year = exp_year

    @property
    def cvv(self):
        """
        Gets the cvv of this RequestCardData.
        The card verification value (i.e. security code) printed on the card.

        :return: The cvv of this RequestCardData.
        :rtype: str
        """
        return self._cvv

    @cvv.setter
    def cvv(self, cvv):
        """
        Sets the cvv of this RequestCardData.
        The card verification value (i.e. security code) printed on the card.

        :param cvv: The cvv of this RequestCardData.
        :type: str
        """

        self._cvv = cvv

    @property
    def billing_postal_code(self):
        """
        Gets the billing_postal_code of this RequestCardData.
        The billing postal code for the card. Postal code for US and Canada payments may reduce decline rate.

        :return: The billing_postal_code of this RequestCardData.
        :rtype: str
        """
        return self._billing_postal_code

    @billing_postal_code.setter
    def billing_postal_code(self, billing_postal_code):
        """
        Sets the billing_postal_code of this RequestCardData.
        The billing postal code for the card. Postal code for US and Canada payments may reduce decline rate.

        :param billing_postal_code: The billing_postal_code of this RequestCardData.
        :type: str
        """

        self._billing_postal_code = billing_postal_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
