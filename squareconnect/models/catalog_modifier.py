# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class CatalogModifier(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, price_money=None, on_by_default=None, ordinal=None):
        """
        CatalogModifier - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'price_money': 'Money',
            'on_by_default': 'bool',
            'ordinal': 'int'
        }

        self.attribute_map = {
            'name': 'name',
            'price_money': 'price_money',
            'on_by_default': 'on_by_default',
            'ordinal': 'ordinal'
        }

        self._name = name
        self._price_money = price_money
        self._on_by_default = on_by_default
        self._ordinal = ordinal

    @property
    def name(self):
        """
        Gets the name of this CatalogModifier.
        The modifier option's name.

        :return: The name of this CatalogModifier.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CatalogModifier.
        The modifier option's name.

        :param name: The name of this CatalogModifier.
        :type: str
        """

        if not name:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def price_money(self):
        """
        Gets the price_money of this CatalogModifier.
        The modifier's price.

        :return: The price_money of this CatalogModifier.
        :rtype: Money
        """
        return self._price_money

    @price_money.setter
    def price_money(self, price_money):
        """
        Sets the price_money of this CatalogModifier.
        The modifier's price.

        :param price_money: The price_money of this CatalogModifier.
        :type: Money
        """

        self._price_money = price_money

    @property
    def on_by_default(self):
        """
        Gets the on_by_default of this CatalogModifier.
        If true, the modifier is the default option in a modifier list for which `selection_type` is `SINGLE`.

        :return: The on_by_default of this CatalogModifier.
        :rtype: bool
        """
        return self._on_by_default

    @on_by_default.setter
    def on_by_default(self, on_by_default):
        """
        Sets the on_by_default of this CatalogModifier.
        If true, the modifier is the default option in a modifier list for which `selection_type` is `SINGLE`.

        :param on_by_default: The on_by_default of this CatalogModifier.
        :type: bool
        """

        self._on_by_default = on_by_default

    @property
    def ordinal(self):
        """
        Gets the ordinal of this CatalogModifier.
        TODO

        :return: The ordinal of this CatalogModifier.
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """
        Sets the ordinal of this CatalogModifier.
        TODO

        :param ordinal: The ordinal of this CatalogModifier.
        :type: int
        """

        self._ordinal = ordinal

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
