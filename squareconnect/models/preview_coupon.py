# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class PreviewCoupon(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, coupon_definition=None, issued_at=None, redeemed_at=None, expires_at=None):
        """
        PreviewCoupon - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'coupon_definition': 'PreviewCouponDefinition',
            'issued_at': 'str',
            'redeemed_at': 'str',
            'expires_at': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'coupon_definition': 'coupon_definition',
            'issued_at': 'issued_at',
            'redeemed_at': 'redeemed_at',
            'expires_at': 'expires_at'
        }

        self._id = id
        self._coupon_definition = coupon_definition
        self._issued_at = issued_at
        self._redeemed_at = redeemed_at
        self._expires_at = expires_at

    @property
    def id(self):
        """
        Gets the id of this PreviewCoupon.
        The unique Square-server-assigned identifier of this coupon.

        :return: The id of this PreviewCoupon.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PreviewCoupon.
        The unique Square-server-assigned identifier of this coupon.

        :param id: The id of this PreviewCoupon.
        :type: str
        """

        if not id:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if len(id) > 36:
            raise ValueError("Invalid value for `id`, length must be less than `36`")
        if len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def coupon_definition(self):
        """
        Gets the coupon_definition of this PreviewCoupon.
        General information about the type of coupon, e.g. its name.

        :return: The coupon_definition of this PreviewCoupon.
        :rtype: PreviewCouponDefinition
        """
        return self._coupon_definition

    @coupon_definition.setter
    def coupon_definition(self, coupon_definition):
        """
        Sets the coupon_definition of this PreviewCoupon.
        General information about the type of coupon, e.g. its name.

        :param coupon_definition: The coupon_definition of this PreviewCoupon.
        :type: PreviewCouponDefinition
        """

        self._coupon_definition = coupon_definition

    @property
    def issued_at(self):
        """
        Gets the issued_at of this PreviewCoupon.
        The time when the coupon was issued, in RFC 3339 format.

        :return: The issued_at of this PreviewCoupon.
        :rtype: str
        """
        return self._issued_at

    @issued_at.setter
    def issued_at(self, issued_at):
        """
        Sets the issued_at of this PreviewCoupon.
        The time when the coupon was issued, in RFC 3339 format.

        :param issued_at: The issued_at of this PreviewCoupon.
        :type: str
        """

        if not issued_at:
            raise ValueError("Invalid value for `issued_at`, must not be `None`")
        if len(issued_at) < 1:
            raise ValueError("Invalid value for `issued_at`, length must be greater than or equal to `1`")

        self._issued_at = issued_at

    @property
    def redeemed_at(self):
        """
        Gets the redeemed_at of this PreviewCoupon.
        The time when the coupon was redeemed, in RFC 3339 format. If unset, the coupon has not been redeemed.

        :return: The redeemed_at of this PreviewCoupon.
        :rtype: str
        """
        return self._redeemed_at

    @redeemed_at.setter
    def redeemed_at(self, redeemed_at):
        """
        Sets the redeemed_at of this PreviewCoupon.
        The time when the coupon was redeemed, in RFC 3339 format. If unset, the coupon has not been redeemed.

        :param redeemed_at: The redeemed_at of this PreviewCoupon.
        :type: str
        """

        self._redeemed_at = redeemed_at

    @property
    def expires_at(self):
        """
        Gets the expires_at of this PreviewCoupon.
        The time when the coupon will, or did, expire, in RFC 3339 format.

        :return: The expires_at of this PreviewCoupon.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """
        Sets the expires_at of this PreviewCoupon.
        The time when the coupon will, or did, expire, in RFC 3339 format.

        :param expires_at: The expires_at of this PreviewCoupon.
        :type: str
        """

        if not expires_at:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")
        if len(expires_at) < 1:
            raise ValueError("Invalid value for `expires_at`, length must be greater than or equal to `1`")

        self._expires_at = expires_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
