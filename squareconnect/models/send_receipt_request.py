# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class SendReceiptRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, tender_id=None, idempotency_key=None, email_address=None, phone_number=None):
        """
        SendReceiptRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'tender_id': 'str',
            'idempotency_key': 'str',
            'email_address': 'str',
            'phone_number': 'str'
        }

        self.attribute_map = {
            'tender_id': 'tender_id',
            'idempotency_key': 'idempotency_key',
            'email_address': 'email_address',
            'phone_number': 'phone_number'
        }

        self._tender_id = tender_id
        self._idempotency_key = idempotency_key
        self._email_address = email_address
        self._phone_number = phone_number

    @property
    def tender_id(self):
        """
        Gets the tender_id of this SendReceiptRequest.
        The ID of a tender on the transaction. Note: This is not the ID of the transaction but of the tender representing the actual payment. This is because it's possible in some cases for a transaction to have multiple tenders which can be displayed on separate receipts.

        :return: The tender_id of this SendReceiptRequest.
        :rtype: str
        """
        return self._tender_id

    @tender_id.setter
    def tender_id(self, tender_id):
        """
        Sets the tender_id of this SendReceiptRequest.
        The ID of a tender on the transaction. Note: This is not the ID of the transaction but of the tender representing the actual payment. This is because it's possible in some cases for a transaction to have multiple tenders which can be displayed on separate receipts.

        :param tender_id: The tender_id of this SendReceiptRequest.
        :type: str
        """

        if not tender_id:
            raise ValueError("Invalid value for `tender_id`, must not be `None`")
        if len(tender_id) < 1:
            raise ValueError("Invalid value for `tender_id`, length must be greater than or equal to `1`")

        self._tender_id = tender_id

    @property
    def idempotency_key(self):
        """
        Gets the idempotency_key of this SendReceiptRequest.
        A value you specify that uniquely identifies this receipt among any other receipts you may have created.  If you're unsure whether a particular receipt was delivered, you can reattempt it with the same idempotency key without worrying about sending it twice.  See [Idempotency keys](#idempotencykeys) for more information.

        :return: The idempotency_key of this SendReceiptRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """
        Sets the idempotency_key of this SendReceiptRequest.
        A value you specify that uniquely identifies this receipt among any other receipts you may have created.  If you're unsure whether a particular receipt was delivered, you can reattempt it with the same idempotency key without worrying about sending it twice.  See [Idempotency keys](#idempotencykeys) for more information.

        :param idempotency_key: The idempotency_key of this SendReceiptRequest.
        :type: str
        """

        if not idempotency_key:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if len(idempotency_key) > 192:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than `192`")
        if len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key

    @property
    def email_address(self):
        """
        Gets the email_address of this SendReceiptRequest.
        The recipient's email address, if available. Either this value or a phone number are required in order to deliver a receipt. If both are provided the receipt will be delivered to the email address and the phone number will be ignored.

        :return: The email_address of this SendReceiptRequest.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """
        Sets the email_address of this SendReceiptRequest.
        The recipient's email address, if available. Either this value or a phone number are required in order to deliver a receipt. If both are provided the receipt will be delivered to the email address and the phone number will be ignored.

        :param email_address: The email_address of this SendReceiptRequest.
        :type: str
        """

        self._email_address = email_address

    @property
    def phone_number(self):
        """
        Gets the phone_number of this SendReceiptRequest.
        The recipient's phone number, if available. Either this value or an email address are required in order to deliver a receipt.

        :return: The phone_number of this SendReceiptRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this SendReceiptRequest.
        The recipient's phone number, if available. Either this value or an email address are required in order to deliver a receipt.

        :param phone_number: The phone_number of this SendReceiptRequest.
        :type: str
        """

        self._phone_number = phone_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
