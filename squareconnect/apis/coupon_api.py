# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CouponApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def preview_create_coupon(self, body, **kwargs):
        """
        PreviewCreateCoupon
        Create a coupon, based on a coupon definition. The coupon will be assigned an expiration date that is one year from the creation date. No notifications will be sent (e.g. SMS, email).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.preview_create_coupon(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PreviewCreateCouponRequest body: An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
        :return: PreviewCreateCouponResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method preview_create_coupon" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `preview_create_coupon`")


        resource_path = '/v2/preview/coupons'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PreviewCreateCouponResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        

    def preview_list_coupons(self, phone_number, **kwargs):
        """
        PreviewListCoupons
        Look up coupons for a merchant, by phone number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.preview_list_coupons(phone_number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str phone_number: A phone number that acts as a lookup key for a set of coupons. (required)
        :return: PreviewListCouponsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_number']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method preview_list_coupons" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'phone_number' is set
        if ('phone_number' not in params) or (params['phone_number'] is None):
            raise ValueError("Missing the required parameter `phone_number` when calling `preview_list_coupons`")


        resource_path = '/v2/preview/coupons'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'phone_number' in params and params['phone_number'] is not None:
            query_params['phone_number'] = params['phone_number']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PreviewListCouponsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        

    def preview_redeem_coupon(self, coupon_id, body, **kwargs):
        """
        PreviewRedeemCoupon
        Change a coupon’s state to “redeemed”, meaning it is inactive, and no longer available for use in a Register transaction.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.preview_redeem_coupon(coupon_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str coupon_id: The coupon that will be redeemed. The coupon will no longer be represented as “active”. (required)
        :param PreviewRedeemCouponRequest body: An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
        :return: PreviewRedeemCouponResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method preview_redeem_coupon" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'coupon_id' is set
        if ('coupon_id' not in params) or (params['coupon_id'] is None):
            raise ValueError("Missing the required parameter `coupon_id` when calling `preview_redeem_coupon`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `preview_redeem_coupon`")


        resource_path = '/v2/preview/coupons/{coupon_id}/redeem'.replace('{format}', 'json')
        path_params = {}
        if 'coupon_id' in params:
            path_params['coupon_id'] = params['coupon_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PreviewRedeemCouponResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        

    def preview_retrieve_coupon(self, coupon_id, **kwargs):
        """
        PreviewRetrieveCoupon
        Look up a coupon by id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.preview_retrieve_coupon(coupon_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str coupon_id: The unique identifier of the coupon. (required)
        :return: PreviewRetrieveCouponResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method preview_retrieve_coupon" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'coupon_id' is set
        if ('coupon_id' not in params) or (params['coupon_id'] is None):
            raise ValueError("Missing the required parameter `coupon_id` when calling `preview_retrieve_coupon`")


        resource_path = '/v2/preview/coupons/{coupon_id}'.replace('{format}', 'json')
        path_params = {}
        if 'coupon_id' in params:
            path_params['coupon_id'] = params['coupon_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PreviewRetrieveCouponResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        
