# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class LoyaltyApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def preview_adjust_loyalty_stars(self, body, **kwargs):
        """
        PreviewAdjustLoyaltyStars
        Add or remove loyalty stars. This call will fail if the loyalty balance would go below zero or go above the number of stars remaining to get the next coupon. If the star adjustment is the number of stars left to reach a coupon threshold, a coupon will be issued (but the customer WILL NOT be sent an SMS notification).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.preview_adjust_loyalty_stars(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PreviewAdjustLoyaltyStarsRequest body: An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
        :return: PreviewAdjustLoyaltyStarsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method preview_adjust_loyalty_stars" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `preview_adjust_loyalty_stars`")


        resource_path = '/v2/preview/loyalty/adjust'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PreviewAdjustLoyaltyStarsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        

    def preview_retrieve_loyalty_status(self, phone_number, **kwargs):
        """
        PreviewRetrieveLoyaltyStatus
        Look up how many stars a customer has, along with general information about the loyalty program, by the customerâ€™s loyalty account phone number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.preview_retrieve_loyalty_status(phone_number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str phone_number: The customer phone number that identifies the loyalty account. (required)
        :return: PreviewRetrieveLoyaltyStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_number']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method preview_retrieve_loyalty_status" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'phone_number' is set
        if ('phone_number' not in params) or (params['phone_number'] is None):
            raise ValueError("Missing the required parameter `phone_number` when calling `preview_retrieve_loyalty_status`")


        resource_path = '/v2/preview/loyalty/status'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'phone_number' in params and params['phone_number'] is not None:
            query_params['phone_number'] = params['phone_number']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PreviewRetrieveLoyaltyStatusResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        
